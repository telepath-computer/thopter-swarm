# fly.io app name and region to use
APP_NAME=thopter-swarm **your value REQUIRED**
REGION=sjc **your value REQUIRED**

# this many volumes and thopters will be allowed to be created
MAX_THOPTERS=20
# thopter fly machine spec
THOPTER_VM_SIZE=performance-2x
# how much storage to give thopter instances
THOPTER_VOLUME_SIZE=50

# hub vm spec
HUB_VM_SIZE=shared-cpu-4x

# where to get issues and code (space-separated list)
GITHUB_REPOS="telepath-computer/thopter-issue-test"
# who to be for commits if permitted by the agent's token
GIT_USER_NAME="ThopterBot"
GIT_USER_EMAIL="thopterbot@telepath.computer"

# The GitHub repo integrations. Each needs two fine-grained PATs and user info
# for commit authorship. Yes this is JSON in an environment variable, it's
# a bit janky but it works. This is a prototype and env vars are how we are
# doing config. Keep it simple, avoid dollar signs - this file does get sourced
# in bash scripts.
# **your values REQUIRED**, replace value
GITHUB_INTEGRATION_JSON=$(cat << "EOF"
{
  "repositories":{
    "owner1/repo1": {
      "issuesPAT": "...personal access token with issue read+write permissions...",
      "agentCoderPAT": "...PAT with contents read+write (read only works too*)...",
      "userName": "ThopterBot",
      "userEmail": "ThopterBot@mycompany.com"
    },
    "owner2/repo2": {
      "issuesPAT": "...",
      "agentCoderPAT": "...",
      "userName": "MySwarmBot",
      "userEmail": "MySwarmBot@myemail.domain"
    }
  }
}
EOF
)
# * you could use read-only contents PAT and then manually attach to idle
# claude code instances, authenticate manually, and push commits after
# reviewing the code in its local workspace. this would mean you don't have to
# worry about special rulesets to limit the branches the bot user can
# contribute on.

# thopter agents have an egress firewall to prevent exfil of secrets and code
# in prompt injection or just incoherent agent behavior. turn this off at your
# own risk. must be the value "I_UNDERSTAND"
DANGEROUSLY_SKIP_FIREWALL=0

# with egress firewall enabled, typical node and python package repos are
# enabled. you can list more here as space-separated domains, whose IPs
# will be looked up and whitelists at thopter creation time.
ALLOWED_DOMAINS="telepath.computer" # or whatever you need

# default port for web terminals (gotty's default is 7681)
WEB_TERMINAL_PORT=7681

# default port for hub dashboard
HUB_PORT=8080

# port thopters call back to hub for status. egress is enabled on thopters for
# this port to the hub host.
HUB_STATUS_PORT=8081

# SECRETS. not using fly secrets as they are broadcast to all machines, we dont
# want all these on thopters.
#
# github personal access token for the hub github issue watcher (needs
# read/write on issues in your repo(s)
#
GITHUB_ISSUES_PAT="..."
GITHUB_ISSUES_POLLING_INTERVAL=30
#
# github personal access token for the thopter machines to checkout code, and
# optionally for the agent to push commits or open PRs if you want that (needs
# at least read on repo contents, typically write and maybe read/write on PRs)
# TODO: see docs/recommendations.md for rulesets to limit to thopter/* branches
#
GITHUB_AGENT_CODER_PAT="..."
#
# fly deploy key. needed by hub to provision thopters.
#
FLY_DEPLOY_KEY="...your custom value REQUIRED..."


